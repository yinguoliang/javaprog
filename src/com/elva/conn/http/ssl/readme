1. 生成一个keystore文件
   keytool -genkeypair -keyalg rsa -keystore server.keystore -storepass 123456
   keytool -genkeypair -keyalg rsa -keystore client.keystore -storepass 123456
2. 服务端TestSSLServerSocket使用server.keystore初始化SSLContext
   server.keystore中存储了公钥和私钥，公钥会在连接时发送到客户端。
        客户端在收到公钥证书时对该证书进行信任校验。

3. 客户端TestSSLClientSocket
        客户端在TrustManager中判断对某个证书是否信任。
        服务端会在会话时将其证书发送到客户端。
        
********************  summary **************************
1) 使用https连接时，服务器会将自己的公钥发送到客户端
2) 客户端收到公钥后，会对该公钥进行信任决策，使用JAVA编程时，java的TrustManager会对证书进行校验
3) 如果服务端设置了needClientAuth(true),那么就会对客户端传递过来的证书进行验证
        调用TrustManager.checkClientTrusted()
******************** verify certificate****************
1) 证书：证书是有某个大家公认的秘钥签名的公钥，通常就是对公钥的摘要信息进行签名。
         通常我们将持有这个秘钥的机构称为CA，其秘钥对应的公钥称为CA证书
2) 由于证书肯定是被某个秘钥签过名的，所以我们可以用对应的公钥（CA证书）进行验证。
        验证的过程就是对证书进行摘要，然后对签名信息用CA公钥解密，再比较两个是否相等。
3) java中，证书的验证非常简单，即：
    A)从CA证书中读取公钥信息
    B)调用X509Certificate.verify(caPubKey)
